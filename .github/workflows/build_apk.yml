name: Flutter Build and Upload APK

on:
  push:
    branches:
      - master  # This triggers the workflow on push to the master branch (adjust to your branch if needed)

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Checks out your repository's code

      - name: Set up Flutter
        uses: subosito/flutter-action@v2  # Set up Flutter environment

      - name: Install dependencies
        run: flutter pub get  # Fetch the dependencies

      - name: Create service_token.json directory and file from GitHub Secret
        run: |
          mkdir -p assets/fcm_access_token  # Ensure the directory exists
          printf "%s" "${{ secrets.FIREBASE_SERVICE_ACCOUNT_FILE }}" > assets/fcm_access_token/service_token.json  # Write the secret to the file using printf

      - name: Create google-services.json file from GitHub Secret
        run: |
          mkdir -p android/app  # Ensure the directory exists
          printf "%s" "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/app/google-services.json  # Write the google-services.json from secret using printf

      - name: Build APK (Release)
        run: flutter build apk --release  # Build the APK for release

      - name: Upload APK as an artifact
        uses: actions/upload-artifact@v3  # Uploads the APK file as an artifact
        with:
          name: app-apk
          path: build/app/outputs/flutter-apk/app-release.apk  # Path to the APK

      - name: Create a Release on GitHub
        uses: softprops/action-gh-release@v1  # Create a GitHub release and upload APK to it
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token to authenticate
        with:
          files: build/app/outputs/flutter-apk/app-release.apk  # Path to the APK
