name: Flutter Build and Upload APK

on:
  push:
    branches:
      - master  # This triggers the workflow on push to the master branch (adjust to your branch if needed)

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Checks out your repository's code

      # - name: Set up Flutter
      #   uses: subosito/flutter-action@v2  # Set up Flutter environment

      # - name: Install dependencies
      #   run: flutter pub get  # Fetch the dependencies

      # Decode and write service_token.json file from GitHub Secret (Base64)
      - name: Decode service_token.json from GitHub secret and create file
        run: |
          mkdir -p assets/fcm_access_token  # Ensure the directory exists
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_FILE }}" | base64 --decode > assets/fcm_access_token/service_token.json  # Decode Base64 and write to file

      # Decode and write google-services.json file from GitHub Secret (Base64)
      - name: Decode google-services.json from GitHub secret and create file
        run: |
          mkdir -p android/app  # Ensure the directory exists
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > android/app/google-services.json  # Decode Base64 and write to file

      # Check the contents of the decoded google-services.json (for debugging)
      - name: Check google-services.json content
        run: |
          cat android/app/google-services.json  # Print the content of the google-services.json file

      # Check the contents of the decoded service_token.json (for debugging)
      - name: Check service_token.json content
        run: |
          cat assets/fcm_access_token/service_token.json  # Print the content of the service_token.json file

      # Commented out the rest of the steps for now (build APK and release)
      # - name: Build APK
      #   run: flutter build apk --release  # Build the APK for release

      # - name: Upload APK as an artifact
      #   uses: actions/upload-artifact@v3  # Uploads the APK file as an artifact
      #   with:
      #     name: app-apk
      #     path: build/app/outputs/flutter-apk/app-release.apk  # Path to the APK

      # - name: Create a Release on GitHub
      #   uses: softprops/action-gh-release@v1  # Create a GitHub release and upload APK to it
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token to authenticate
      #   with:
      #     files: build/app/outputs/flutter-apk/app-release.apk  # Path to the APK
