name: Flutter Build and Upload APK

on:
  push:
    branches:
      - master  # This triggers the workflow on push to the master branch (adjust to your branch if needed)
    tags:
      - 'v*.*.*'  # This triggers the workflow for tags like v1.0.0, v2.1.0, etc.

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Checks out your repository's code

      - name: Set up Flutter
        uses: subosito/flutter-action@v2  # Set up Flutter environment

      - name: Install dependencies
        run: flutter pub get  # Fetch the dependencies

      - name: Create google-services.json from GitHub secret
        id: create-google-services-json
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "google-services.json"  # The name of the file to be created
          json: ${{ secrets.GOOGLE_SERVICES_JSON }}  # GitHub secret containing your google-services.json content
          dir: "android/app"  # The directory to place the file in

      - name: Ensure directory exists for service_token.json
        run: |
          mkdir -p assets/fcm_access_token  # Ensure the directory exists

      - name: Create service_token.json from GitHub secret
        id: create-service-token-json
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "service_token.json"  # The name of the file to be created
          json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_FILE }}  # GitHub secret containing your service_token.json content
          dir: "assets/fcm_access_token"  # The directory to place the file in

      - name: Build APK
        run: flutter build apk --release  # Build the APK for release

      - name: Upload APK as an artifact
        uses: actions/upload-artifact@v3  # Uploads the APK file as an artifact
        with:
          name: app-apk
          path: build/app/outputs/flutter-apk/app-release.apk  # Path to the APK

      - name: Create a Release on GitHub
        uses: softprops/action-gh-release@v1  # Create a GitHub release and upload APK to it
        with:
          files: build/app/outputs/flutter-apk/app-release.apk  # Path to the APK
          tag_name: ${{ github.ref }}  # Use the tag that triggered the workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub token to authenticate
